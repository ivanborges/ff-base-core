# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

pool:
  vmImage: 'VS2017-Win2016'
  
trigger:
- master

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  version: '1.0.1'
  releaseVersion: '1.0.0'

steps:
# Install NuGet Tool
- task: NuGetToolInstaller@0
  displayName: Install NuGet Tool

# Restore NuGet packages
- task: NuGetCommand@2
  displayName: Restore NuGet Packages
  inputs:
    restoreSolution: '$(solution)'

# Build solution
- task: VSBuild@1
  displayName: Build Solution
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    
# Run unit tests
- task: VSTest@2
  displayName: Run Unit Tests
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    
# Prepare publish files
- task: DotNetCoreCLI@2
  displayName: Prepare Publish Files
  inputs:
    command: publish
    publishWebProjects: False
    projects: '**/**/Furiza.Base.Core.*.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: False
    
# Publish the artifacts
- task: PublishBuildArtifacts@1
  displayName: Publish Artifacts
  
# Pack projects
- task: DotNetCoreCLI@2
  displayName: Pack Projects
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.Base.Core.*.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: version    
    
# Push Furiza.Base.Core.SeedWork
- task: NuGetCommand@2
  displayName: Push Furiza.Base.Core.SeedWork to NuGet.org
  condition: and(succeeded(), eq(variables['releaseVersion'], variables['version']))
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.Base.Core.SeedWork.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-core-seedwork'
    
    
    

# Pack projects
#- task: DotNetCoreCLI@2
  #displayName: Pack Projects
  #inputs:
    #command: pack
    #packagesToPack: '**/**/Furiza.Base.Core.*.csproj'
    #versioningScheme: byEnvVar
    #versionEnvVar: version
    
## Push Furiza.Base.Core.SeedWork
#- task: NuGetCommand@2
  #displayName: Push Furiza.Base.Core.SeedWork to NuGet.org
  #inputs:
    #command: push
    #nuGetFeedType: external
    #packagesToPush: '$(build.artifactStagingDirectory)/Furiza.Base.Core.SeedWork.*.nupkg'
    #publishFeedCredentials: 'apikey-nuget-core-seedwork'

# Abaixo, instruções para webapi. Serão removidas após criada a primeira.
## Run unit tests
#- task: VSTest@2
  #displayName: Run Unit Tests
  #inputs:
    #platform: '$(buildPlatform)'
    #configuration: '$(buildConfiguration)'
    
## Prepare publish files
#- task: DotNetCoreCLI@2
  #displayName: Prepare Publish Files
  #inputs:
    #command: publish
    #solution: '$(solution)'
    #projects: src/BuildYaml
    #arguments: --output $(Build.ArtifactStagingDirectory)

## Publish the artifacts
#- task: PublishBuildArtifacts@1
  #displayName: Publish Artifacts
  #inputs:
    #pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    #artifactName: 'drop' 
    #publishLocation: 'Container'
