# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

pool:
  vmImage: 'VS2017-Win2016'
  
trigger:
- master

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  SeedWorkMajor: '1'
  SeedWorkMinor: '0'
  SeedWorkPatch: '1'
  ExceptionsMajor: '1'
  ExceptionsMinor: '0'
  ExceptionsPatch: '0'  
  DomainBRMajor: '1'
  DomainBRMinor: '0'
  DomainBRPatch: '0'

steps:
# Install NuGet Tool
- task: NuGetToolInstaller@0
  displayName: Install NuGet Tool

# Restore NuGet packages
- task: NuGetCommand@2
  displayName: Restore NuGet Packages
  inputs:
    restoreSolution: '$(solution)'

# Compile
- task: VSBuild@1
  displayName: Build Solution
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Pack Furiza.Base.Core.SeedWork
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.Base.Core.SeedWork
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.Base.Core.SeedWork.csproj'
    versioningScheme: byPrereleaseNumber
    majorVersion: '$(SeedWorkMajor)'
    minorVersion: '$(SeedWorkMinor)'
    patchVersion: '$(SeedWorkPatch)'
    
# Push Furiza.Base.Core.SeedWork
- task: NuGetCommand@2
  displayName: Push Furiza.Base.Core.SeedWork to NuGet.org
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.Base.Core.SeedWork.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-core-seedwork'

# Abaixo, instruções para webapi. Serão removidas após criada a primeira.
## Run unit tests
#- task: VSTest@2
  #displayName: Run Unit Tests
  #inputs:
    #platform: '$(buildPlatform)'
    #configuration: '$(buildConfiguration)'
    
## Prepare publish files
#- task: DotNetCoreCLI@2
  #displayName: Prepare Publish Files
  #inputs:
    #command: publish
    #solution: '$(solution)'
    #projects: src/BuildYaml
    #arguments: --output $(Build.ArtifactStagingDirectory)

## Publish the artifacts
#- task: PublishBuildArtifacts@1
  #displayName: Publish Artifacts
  #inputs:
    #pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    #artifactName: 'drop' 
    #publishLocation: 'Container'
