pool:
  vmImage: 'VS2017-Win2016'

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

  #Pack1 -------------------
  ##SeedWork
  ##Exceptions
  ##Exceptions.Serialization
  ##Domain.BR
  Pack1Version: '1.0.1'
  Pack1PushToNuget: False

  #Pack2 -------------------
  ##Identity.Abstractions
  Pack2Version: '1.0.0'
  Pack2PushToNuget: False

steps:
# Install NuGet Tool
- task: NuGetToolInstaller@0
  displayName: Install NuGet Tool

# Restore NuGet packages
- task: NuGetCommand@2
  displayName: Restore NuGet Packages
  inputs:
    restoreSolution: '$(solution)'

# Build solution
- task: VSBuild@1
  displayName: Build Solution
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Run unit tests
- task: VSTest@2
  displayName: Run Unit Tests
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Prepare publish files
- task: DotNetCoreCLI@2
  displayName: Prepare Publish Files
  inputs:
    command: publish
    publishWebProjects: False
    projects: '**/**/Furiza.Base.Core.*.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: False

# Publish the artifacts
- task: PublishBuildArtifacts@1
  displayName: Publish Artifacts

# Publish Furiza.Base.Core.SeedWork to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.Base.Core.SeedWork
  condition: eq(variables['Pack1PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.Base.Core.SeedWork.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack1Version
- task: NuGetCommand@2
  displayName: Push Furiza.Base.Core.SeedWork to NuGet.org
  condition: eq(variables['Pack1PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.Base.Core.SeedWork.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-core-seedwork'

# Publish Furiza.Base.Core.Exceptions to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.Base.Core.Exceptions
  condition: eq(variables['Pack1PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.Base.Core.Exceptions.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack1Version
- task: NuGetCommand@2
  displayName: Push Furiza.Base.Core.Exceptions to NuGet.org
  condition: eq(variables['Pack1PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.Base.Core.Exceptions.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-core-exceptions'

# Publish Furiza.Base.Core.Exceptions.Serialization to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.Base.Core.Exceptions.Serialization
  #condition: eq(variables['Pack1PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.Base.Core.Exceptions.Serialization.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack1Version
- task: NuGetCommand@2
  displayName: Push Furiza.Base.Core.Exceptions.Serialization to NuGet.org
  #condition: eq(variables['Pack1PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.Base.Core.Exceptions.Serialization.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-core-exceptions.serialization'

# Publish Furiza.Base.Core.Domain.BR to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.Base.Core.Domain.BR
  condition: eq(variables['Pack1PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.Base.Core.Domain.BR.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack1Version
- task: NuGetCommand@2
  displayName: Push Furiza.Base.Core.Domain.BR to NuGet.org
  condition: eq(variables['Pack1PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.Base.Core.Domain.BR.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-core-domain.br'

# Publish Furiza.Base.Core.Identity.Abstractions to NuGet.org
- task: DotNetCoreCLI@2
  displayName: Pack Furiza.Base.Core.Identity.Abstractions
  condition: eq(variables['Pack2PushToNuget'], 'True')
  inputs:
    command: pack
    packagesToPack: '**/**/Furiza.Base.Core.Identity.Abstractions.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: Pack2Version
- task: NuGetCommand@2
  displayName: Push Furiza.Base.Core.Identity.Abstractions to NuGet.org
  condition: eq(variables['Pack2PushToNuget'], 'True')
  continueOnError: True
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(build.artifactStagingDirectory)/Furiza.Base.Core.Identity.Abstractions.*.nupkg'
    publishFeedCredentials: 'apikey-nuget-core-identity.abstractions'
